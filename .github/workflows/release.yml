name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '0.1.0'

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SSO_ENABLED_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Configure Git for private repos
        run: |
          git config --global url."https://${{ secrets.SSO_ENABLED_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global net.git-fetch-with-cli true

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-2022
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SSO_ENABLED_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Configure Git for private repos
        run: |
          git config --global url."https://${{ secrets.SSO_ENABLED_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global net.git-fetch-with-cli true

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-13
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SSO_ENABLED_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Configure Git for private repos
        run: |
          git config --global url."https://${{ secrets.SSO_ENABLED_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global net.git-fetch-with-cli true

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SSO_ENABLED_TOKEN }}

      - name: Configure Git for private repos
        run: |
          git config --global url."https://${{ secrets.SSO_ENABLED_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global net.git-fetch-with-cli true

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    environment:
      name: pypi
      url: https://pypi.org/p/alwayson_py
    permissions:
      id-token: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  test-release:
    name: Test Release (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: [linux, windows, macos, sdist]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: List built packages
        run: ls -la dist/

      - name: Test wheel installation
        run: |
          pip install dist/alwayson_py-*-cp312-cp312-linux_x86_64.whl
          python -c "import alwayson; print(f'Version: {alwayson.__version__}')"